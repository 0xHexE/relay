# Copyright (c) Facebook, Inc. and its affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

directive @relay_test_operation on QUERY | MUTATION | SUBSCRIPTION

directive @inline on FRAGMENT_DEFINITION

directive @no_inline(raw_response_type: Boolean) on FRAGMENT_DEFINITION

directive @raw_response_type on QUERY | MUTATION | SUBSCRIPTION

directive @relay_early_flush on QUERY

directive @DEPRECATED__relay_ignore_unused_variables_error on QUERY | MUTATION | SUBSCRIPTION

directive @refetchable(
  queryName: String!
  directives: [String!]
) on FRAGMENT_DEFINITION

directive @preloadable on QUERY

directive @relay(
  mask: Boolean
  plural: Boolean
) on FRAGMENT_DEFINITION | FRAGMENT_SPREAD

# Handles
# prettier-ignore
directive @__clientField(
  filters: [String!]
  handle: String!
  key: String
) repeatable on FIELD

# MatchTransform
directive @match(key: String) on FIELD

directive @module(name: String!) on FRAGMENT_SPREAD

# ConnectionTransform
directive @connection(
  key: String!
  filters: [String]
  handler: String
  dynamicKey_UNSTABLE: String
) on FIELD

directive @stream_connection(
  key: String!
  filters: [String]
  handler: String
  label: String
  initial_count: Int!
  if: Boolean = true
  use_customized_batch: Boolean = false
  dynamicKey_UNSTABLE: String
) on FIELD

# RequiredTransform
enum RequiredFieldAction {
  NONE
  LOG
  THROW
}

"""
`@required` is a directive you can add to fields in your Relay queries to
declare how null values should be handled at runtime. You can think of it as
saying "if this field is ever null, its parent field is invalid and should be
null".

When you have a GraphQL schema where many fields are nullable, a considerable
amount of product code is needed to handle each field's potential "nullness"
before the underlying data can be used. With `@required`, Relay can handle
some types of null checks before it returns data to your component, which
means that **any field you annotate with** **`@required`** **will become
non-nullable in the generated types for your response**.

If a `@required` field is null at runtime, Relay will "bubble" that nullness
up to the field's parent. For example, given this query:

```graphql
query MyQuery {
  viewer {
    name @required(action: LOG)
    age
  }
}
```

If `name` is null, relay would return `{ viewer: null }`. You can think of
`@required` in this instance as saying "`viewer` is useless without a
`name`".

Read more: https://www.internalfb.com/intern/staticdocs/relay/docs/guides/required-directive/
"""
directive @required(action: RequiredFieldAction!) on FIELD

# DeclarativeConnection
directive @deleteRecord on FIELD
directive @deleteEdge(connections: [ID!]!) on FIELD
directive @appendEdge(connections: [ID!]!) on FIELD
directive @prependEdge(connections: [ID!]!) on FIELD
directive @appendNode(connections: [ID!]!, edgeTypeName: String!) on FIELD
directive @prependNode(connections: [ID!]!, edgeTypeName: String!) on FIELD

# RelayClientComponentTransform
directive @relay_client_component on FRAGMENT_SPREAD

# RelayResolver
directive @relay_resolver(
  fragment_name: String!
  import_path: String!
) on FIELD_DEFINITION
